{"version":3,"sources":["../src/passport.js"],"names":["module","exports","passport","pool","serializeUser","user","done","deserializeUser","obj","use","clientID","facebook_app_id","clientSecret","facebook_app_secret","callbackURL","facebook_callback_url","profileFields","accessToken","refreshToken","profile","process","nextTick","connect","client","query","id","result","rows","length","emails","value","release","catch","console","error","err","message","e","stack"],"mappings":";;AAAA;;;;AACA;;;;;;AACA;;AAEAA,OAAOC,OAAP,GAAiB,UAAUC,QAAV,EAAoBC,IAApB,EAA0B;;AAEvC;AACAD,aAASE,aAAT,CAAuB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACzCA,aAAK,IAAL,EAAWD,IAAX;AACH,KAFD;AAGAH,aAASK,eAAT,CAAyB,UAAUC,GAAV,EAAeF,IAAf,EAAqB;AAC1CA,aAAK,IAAL,EAAWE,GAAX;AACH,KAFD;;AAIA;AACAN,aAASO,GAAT,CAAa,+BAAqB;AAC9BC,kBAAU,iBAAOC,eADa;AAE9BC,sBAAc,iBAAOC,mBAFS;AAG9BC,qBAAa,iBAAOC,qBAHU;AAI9BC,uBAAe,CAAC,IAAD,EAAO,aAAP,EAAsB,QAAtB,EAAgC,OAAhC;AAJe,KAArB,EAMT,UAAUC,WAAV,EAAuBC,YAAvB,EAAqCC,OAArC,EAA8Cb,IAA9C,EAAoD;AAChDc,gBAAQC,QAAR,CAAiB,YAAY;AAAA;;AACzB;AACA,sDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACOhB,oCADP,GACc,EADd;AAAA;AAAA,uCAEsBF,KAAKmB,OAAL,EAFtB;;AAAA;AAEOC,sCAFP;AAAA;AAAA;AAAA,uCAI0BA,OAAOC,KAAP,CAAa,iDAAb,EAAgE,CAACL,QAAQM,EAAT,CAAhE,CAJ1B;;AAAA;AAIWC,sCAJX;;AAAA,sCAKWA,OAAOC,IAAP,CAAYC,MAAZ,IAAsB,CALjC;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAM0BL,OAAOC,KAAP,CAAa,sFAAb,EACX,CAACL,QAAQU,MAAR,CAAe,CAAf,EAAkBC,KAAnB,EAA0B,QAA1B,EAAoCX,QAAQM,EAA5C,CADW,CAN1B;;AAAA;AAMWC,sCANX;;AAAA;AASOrB,uCAAOqB,OAAOC,IAAP,CAAY,CAAZ,CAAP;;AATP;AAAA;;AAWOJ,uCAAOQ,OAAP;AAXP;;AAAA;AAAA,iEAaUzB,KAAK,IAAL,EAAWD,IAAX,CAbV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD,KAcK2B,KAdL,CAcW,eAAO;AACdC,wBAAQC,KAAR,CAAcC,IAAIC,OAAlB,EAA2BC,EAAEC,KAA7B;AACA,uBAAOhC,KAAK6B,GAAL,CAAP;AACH,aAjBD;AAkBH,SApBD;AAqBH,KA5BQ,CAAb;AA+BH,CA1CD","file":"passport.js","sourcesContent":["import config from './config';\r\nimport { Strategy as FacebookStrategy } from 'passport-facebook';\r\n//import { Strategy as GoogleStrategy } from 'passport-google';\r\n\r\nmodule.exports = function (passport, pool) {\r\n\r\n    // Passport session setup.\r\n    passport.serializeUser(function (user, done) {\r\n        done(null, user);\r\n    });\r\n    passport.deserializeUser(function (obj, done) {\r\n        done(null, obj);\r\n    });\r\n\r\n    // Use the FacebookStrategy within Passport.\r\n    passport.use(new FacebookStrategy({\r\n        clientID: config.facebook_app_id,\r\n        clientSecret: config.facebook_app_secret,\r\n        callbackURL: config.facebook_callback_url,\r\n        profileFields: ['id', 'displayName', 'photos', 'email']\r\n    },\r\n        function (accessToken, refreshToken, profile, done) {\r\n            process.nextTick(function () {\r\n                //Check whether the User exists or not using profile.id\r\n                (async () => {\r\n                    let user = {};\r\n                    let client = await pool.connect()\r\n                    try {\r\n                        let result = await client.query('SELECT id,email FROM users WHERE facebook_id=$1', [profile.id]);\r\n                        if (result.rows.length == 0) {\r\n                            result = await client.query('INSERT INTO users (email, password, facebook_id) VALUES($1,$2,$3) RETURNING id,email',\r\n                                [profile.emails[0].value, \"123456\", profile.id]);\r\n                        }\r\n                        user = result.rows[0];\r\n                    } finally {\r\n                        client.release();\r\n                    }\r\n                    return done(null, user);\r\n                })().catch(err => {\r\n                    console.error(err.message, e.stack);\r\n                    return done(err);\r\n                });\r\n            });\r\n        }\r\n    ));\r\n\r\n};"]}