{
  "version": 3,
  "sources": [
    "passport.js"
  ],
  "names": [
    "passport",
    "pool",
    "serializeUser",
    "user",
    "done",
    "deserializeUser",
    "obj",
    "use",
    "clientID",
    "facebook_app_id",
    "clientSecret",
    "facebook_app_secret",
    "callbackURL",
    "facebook_callback_url",
    "profileFields",
    "passReqToCallback",
    "req",
    "token",
    "refreshToken",
    "profile",
    "process",
    "nextTick",
    "connect",
    "client",
    "query",
    "id",
    "emails",
    "value",
    "result",
    "rows",
    "length",
    "console",
    "error",
    "message",
    "e",
    "stack",
    "release",
    "catch",
    "err",
    "google_client_id",
    "google_client_secret",
    "google_callback_url"
  ],
  "mappings": "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",
  "file": "passport.js",
  "sourcesContent": [
    "import config from \"./config\";\r\nimport {Strategy as FacebookStrategy} from \"passport-facebook\";\r\nimport {OAuth2Strategy as GoogleStrategy} from \"passport-google-oauth\";\r\n\r\nexport default function (passport, pool) {\r\n\r\n    // Passport session setup.\r\n    passport.serializeUser(function (user, done) {\r\n        done(null, user);\r\n    });\r\n    passport.deserializeUser(function (obj, done) {\r\n        done(null, obj);\r\n    });\r\n\r\n    // Use the FacebookStrategy within Passport.\r\n    passport.use(new FacebookStrategy({\r\n        clientID: config.facebook_app_id,\r\n        clientSecret: config.facebook_app_secret,\r\n        callbackURL: config.facebook_callback_url,\r\n        profileFields: ['id', 'displayName', 'photos', 'email'],\r\n        passReqToCallback: true\r\n    },\r\n        function (req, token, refreshToken, profile, done) {\r\n            process.nextTick(function () {\r\n                //Check whether the User exists or not using profile.id\r\n                (async () => {\r\n                    let user = {};\r\n                    let client = await pool.connect();\r\n                    try {\r\n                        let result = await client.query('SELECT id,email FROM users WHERE facebook_id=$1 OR email=$2',\r\n                            [profile.id, profile.emails[0].value]);\r\n                        if (result.rows.length === 0) {\r\n                            result = await client.query('INSERT INTO users (email, password, facebook_id) VALUES($1,$2,$3) RETURNING id,email',\r\n                                [profile.emails[0].value, null, profile.id]);\r\n                        }\r\n                        user = result.rows[0];\r\n                    } catch (err) {\r\n                        console.error(err.message, e.stack);\r\n                        return done(err);\r\n                    } finally {\r\n                        client.release();\r\n                    }\r\n                    return done(null, user);\r\n                })().catch(err => {\r\n                    console.error(err.message, e.stack);\r\n                    return done(err);\r\n                });\r\n            });\r\n        }\r\n    ));\r\n\r\n    // Use the GoogleStrategy within Passport.\r\n    passport.use(new GoogleStrategy({\r\n        clientID: config.google_client_id,\r\n        clientSecret: config.google_client_secret,\r\n        callbackURL: config.google_callback_url,\r\n        passReqToCallback: true\r\n    },\r\n        function (req, token, refreshToken, profile, done) {\r\n            process.nextTick(function () {\r\n                //Check whether the User exists or not using profile.id\r\n                (async () => {\r\n                    let user = {};\r\n                    let client = await pool.connect();\r\n                    try {\r\n                        let result = await client.query('SELECT id,email FROM users WHERE google_id=$1 OR email=$2',\r\n                            [profile.id, profile.emails[0].value]);\r\n                        if (result.rows.length === 0) {\r\n                            result = await client.query('INSERT INTO users (email, password, google_id) VALUES($1,$2,$3) RETURNING id,email',\r\n                                [profile.emails[0].value, null, profile.id]);\r\n                        }\r\n                        user = result.rows[0];\r\n                    } catch (err) {\r\n                        console.error(err.message, e.stack);\r\n                        return done(err);\r\n                    } finally {\r\n                        client.release();\r\n                    }\r\n                    return done(null, user);\r\n                })().catch(err => {\r\n                    console.error(err.message, e.stack);\r\n                    return done(err);\r\n                });\r\n            });\r\n        }\r\n    ));\r\n\r\n};"
  ]
}