{
  "version": 3,
  "sources": [
    "../../src/routes/login.js"
  ],
  "names": [
    "saltRounds",
    "router",
    "Router",
    "post",
    "req",
    "res",
    "checkBody",
    "signup",
    "errors",
    "validationErrors",
    "json",
    "success",
    "pool",
    "connect",
    "then",
    "client",
    "query",
    "body",
    "email",
    "result",
    "rowCount",
    "message",
    "catch",
    "release",
    "e",
    "hash",
    "password",
    "token",
    "sign",
    "id",
    "rows",
    "secret",
    "expiresIn",
    "token_duration",
    "err",
    "length",
    "user",
    "compare",
    "match",
    "get",
    "isAuthenticated",
    "module",
    "exports"
  ],
  "mappings": ";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,EAAnB;;AAEA,IAAMC,SAAS,kBAAQC,MAAR,EAAf;;AAEAD,OAEEE,IAFF,CAEO,SAFP,EAEkB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;;AAEpCD,KAAIE,SAAJ,CAAc,kBAAQC,MAAtB;AACA,KAAIC,SAASJ,IAAIK,gBAAJ,EAAb;;AAEA,KAAID,MAAJ,EAAY;AACX,SAAOH,IAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBH,QAAQA,MAA1B,EAAT,CAAP;AACA;;AAEDJ,KAAIQ,IAAJ,CAASC,OAAT,GAAmBC,IAAnB,CAAwB,kBAAU;;AAEjC;AACAC,SAAOC,KAAP,CAAa,wCAAb,EAAuD,CAACZ,IAAIa,IAAJ,CAASC,KAAV,CAAvD,EACEJ,IADF,CACO,kBAAU;AACf,OAAIK,OAAOC,QAAP,IAAmB,CAAvB,EACC,OAAOf,IAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBU,SAAS,oCAA3B,EAAT,CAAP;AACD,GAJF,EAKEC,KALF,CAKQ,aAAK;AACXP,UAAOQ,OAAP;AACA,SAAMC,CAAN;AACA,GARF;;AAUA;AACA,mBAAOC,IAAP,CAAYrB,IAAIa,IAAJ,CAASS,QAArB,EAA+B1B,UAA/B,EACEc,IADF,CACO,UAAUW,IAAV,EAAgB;;AAErB;AACAV,UAAOC,KAAP,CAAa,sEAAb,EAAqF,CAACZ,IAAIa,IAAJ,CAASC,KAAV,EAAiBO,IAAjB,CAArF,EACEX,IADF,CACO,kBAAU;AACfC,WAAOQ,OAAP;AACqB,QAAIJ,OAAOC,QAAP,KAAoB,CAAxB,EAA2B;AAC/C;AACwB,SAAIO,QAAQ,uBAAIC,IAAJ,CAAS;AAC5CC,UAAIV,OAAOW,IAAP,CAAY,CAAZ,EAAeD,EADyB;AAE5CX,aAAOC,OAAOW,IAAP,CAAY,CAAZ,EAAeZ;AAFsB,MAAT,EAGjC,iBAAOa,MAH0B,EAGlB;AAChBC,iBAAW,iBAAOC;AADF,MAHkB,CAAZ;;AAOxB;AACA,YAAO5B,IAAIK,IAAJ,CAAS;AACfC,eAAS,IADM;AAEfgB,aAAOA,KAFQ;AAGfK,iBAAW,iBAAOC;AAHH,MAAT,CAAP;AAKA,KAfoB,MAgBpB,OAAO5B,IAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAT,CAAP;AACD,IApBF,EAqBEW,KArBF,CAqBQ,aAAK;AACXP,WAAOQ,OAAP;AACA,UAAMC,CAAN;AACA,IAxBF;AAyBA,GA7BF,EA8BEF,KA9BF,CA8BQ,UAAUY,GAAV,EAAe;AACrB,SAAMA,GAAN;AACA,GAhCF;AAiCA,EA/CD;AAiDA,CA5DF,EA8DE/B,IA9DF,CA8DO,UA9DP,EA8DmB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACrCD,KAAIQ,IAAJ,CAASC,OAAT,GAAmBC,IAAnB,CAAwB,kBAAU;;AAEjC;AACAC,SAAOC,KAAP,CAAa,4CAAb,EAA2D,CAACZ,IAAIa,IAAJ,CAASC,KAAV,CAA3D,EACEJ,IADF,CACO,kBAAU;AACfC,UAAOQ,OAAP;;AAEA;AACA,OAAIJ,OAAOW,IAAP,CAAYK,MAAZ,GAAqB,CAAzB,EAA4B;AAC3B,WAAO9B,IAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBU,SAAS,wBAA3B,EAAT,CAAP;AACe,IAFhB,MAEsB,IAAIF,OAAOW,IAAP,CAAY,CAAZ,EAAeJ,QAAf,KAA4B,IAAhC,EAAsC;AAC3D,WAAOrB,IAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBU,SAAS,wBAA3B,EAAT,CAAP;AACA,IAFqB,MAEf;AACY,QAAIe,OAAOjB,OAAOW,IAAP,CAAY,CAAZ,CAAX;;AAElB,qBAAOO,OAAP,CAAejC,IAAIa,IAAJ,CAASS,QAAxB,EAAkCU,KAAKV,QAAvC,EACEZ,IADF,CACO,UAAUwB,KAAV,EAAiB;;AAEtB;AACA,SAAI,CAACA,KAAL,EAAY;AACX,aAAOjC,IAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBU,SAAS,wBAA3B,EAAT,CAAP;AACA,MAFD,MAEO;;AAEN;AAC2B,UAAIM,QAAQ,uBAAIC,IAAJ,CAAS;AAC/CC,WAAIO,KAAKP,EADsC;AAE/CX,cAAOkB,KAAKlB;AAFmC,OAAT,EAGpC,iBAAOa,MAH6B,EAGrB;AAChBC,kBAAW,iBAAOC;AADF,OAHqB,CAAZ;;AAO3B;AACA,aAAO5B,IAAIK,IAAJ,CAAS;AACfC,gBAAS,IADM;AAEfgB,cAAOA,KAFQ;AAGfK,kBAAW,iBAAOC;AAHH,OAAT,CAAP;AAKA;AAED,KAxBF;AAyBA;AACD,GAtCF,EAuCEX,KAvCF,CAuCQ,aAAK;AACXP,UAAOQ,OAAP;AACA,SAAMC,CAAN;AACA,GA1CF;AA2CA,EA9CD;AAgDA,CA/GF;;AAiHC;AAjHD,CAkHEe,GAlHF,CAkHM,gBAlHN,EAkHwB,UAAUnC,GAAV,EAAeC,GAAf,EAAoB;AAC1C,KAAID,IAAIoC,eAAJ,EAAJ,EAA2B;;AAE1B;AACS,MAAIb,QAAQ,uBAAIC,IAAJ,CAASxB,IAAIgC,IAAb,EAAmB,iBAAOL,MAA1B,EAAkC;AACtDC,cAAW,iBAAOC;AADoC,GAAlC,CAAZ;;AAIT;AACA,SAAO5B,IAAIK,IAAJ,CAAS;AACfC,YAAS,IADM;AAEfgB,UAAOA,KAFQ;AAGfK,cAAW,iBAAOC;AAHH,GAAT,CAAP;AAKA,EAbD,MAaO;AACN,SAAO5B,IAAIK,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBU,SAAS,wBAA3B,EAAT,CAAP;AACA;AACD,CAnIF;;AAqIA;;;;;;;;;;;;;;;AAeAoB,OAAOC,OAAP,GAAiBzC,MAAjB",
  "file": "login.js",
  "sourcesContent": [
    "import express from \"express\";\r\nimport config from \"./../config\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcrypt\";\r\nimport schemas from \"../schemas\";\r\n\r\nconst saltRounds = 10;\r\n\r\nconst router = express.Router();\r\n\r\nrouter\r\n\r\n\t.post('/signup', function (req, res) {\r\n\r\n\t\treq.checkBody(schemas.signup);\r\n\t\tlet errors = req.validationErrors();\r\n\r\n\t\tif (errors) {\r\n\t\t\treturn res.json({ success: false, errors: errors });\r\n\t\t}\r\n\r\n\t\treq.pool.connect().then(client => {\r\n\r\n\t\t\t// check if email already exists\r\n\t\t\tclient.query('SELECT email FROM users WHERE email=$1', [req.body.email])\r\n\t\t\t\t.then(result => {\r\n\t\t\t\t\tif (result.rowCount >= 1)\r\n\t\t\t\t\t\treturn res.json({ success: false, message: \"This email has already been taken.\" });\r\n\t\t\t\t})\r\n\t\t\t\t.catch(e => {\r\n\t\t\t\t\tclient.release();\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t});\r\n\r\n\t\t\t// encrypt password\r\n\t\t\tbcrypt.hash(req.body.password, saltRounds)\r\n\t\t\t\t.then(function (hash) {\r\n\r\n\t\t\t\t\t// create new user record\r\n\t\t\t\t\tclient.query('INSERT INTO users(email, password) VALUES($1, $2) RETURNING id,email', [req.body.email, hash])\r\n\t\t\t\t\t\t.then(result => {\r\n\t\t\t\t\t\t\tclient.release();\r\n                            if (result.rowCount === 1) {\r\n\t\t\t\t\t\t\t\t// create a token\r\n                                let token = jwt.sign({\r\n\t\t\t\t\t\t\t\t\tid: result.rows[0].id,\r\n\t\t\t\t\t\t\t\t\temail: result.rows[0].email\r\n\t\t\t\t\t\t\t\t}, config.secret, {\r\n\t\t\t\t\t\t\t\t\t\texpiresIn: config.token_duration\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t// return the token information\r\n\t\t\t\t\t\t\t\treturn res.json({\r\n\t\t\t\t\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\t\t\t\t\ttoken: token,\r\n\t\t\t\t\t\t\t\t\texpiresIn: config.token_duration\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t} else\r\n\t\t\t\t\t\t\t\treturn res.json({ success: false });\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(e => {\r\n\t\t\t\t\t\t\tclient.release();\r\n\t\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t\t.catch(function (err) {\r\n\t\t\t\t\tthrow err;\r\n\t\t\t\t});\r\n\t\t});\r\n\r\n\t})\r\n\r\n\t.post('/account', function (req, res) {\r\n\t\treq.pool.connect().then(client => {\r\n\r\n\t\t\t// find the user\r\n\t\t\tclient.query('SELECT * FROM users WHERE email=$1 LIMIT 1', [req.body.email])\r\n\t\t\t\t.then(result => {\r\n\t\t\t\t\tclient.release();\r\n\r\n\t\t\t\t\t// user not found\r\n\t\t\t\t\tif (result.rows.length < 1) {\r\n\t\t\t\t\t\treturn res.json({ success: false, message: 'Authentication failed.' });\r\n                    } else if (result.rows[0].password === null) {\r\n\t\t\t\t\t\treturn res.json({ success: false, message: 'Authentication failed.' });\r\n\t\t\t\t\t} else {\r\n                        let user = result.rows[0];\r\n\r\n\t\t\t\t\t\tbcrypt.compare(req.body.password, user.password)\r\n\t\t\t\t\t\t\t.then(function (match) {\r\n\r\n\t\t\t\t\t\t\t\t// wrong password\r\n\t\t\t\t\t\t\t\tif (!match) {\r\n\t\t\t\t\t\t\t\t\treturn res.json({ success: false, message: 'Authentication failed.' });\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\t// create a token\r\n                                    let token = jwt.sign({\r\n\t\t\t\t\t\t\t\t\t\tid: user.id,\r\n\t\t\t\t\t\t\t\t\t\temail: user.email\r\n\t\t\t\t\t\t\t\t\t}, config.secret, {\r\n\t\t\t\t\t\t\t\t\t\t\texpiresIn: config.token_duration\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\t// return the token information\r\n\t\t\t\t\t\t\t\t\treturn res.json({\r\n\t\t\t\t\t\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\t\t\t\t\t\ttoken: token,\r\n\t\t\t\t\t\t\t\t\t\texpiresIn: config.token_duration\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(e => {\r\n\t\t\t\t\tclient.release();\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t});\r\n\t\t});\r\n\r\n\t})\r\n\r\n\t//authenticated by passport\r\n\t.get('/authenticated', function (req, res) {\r\n\t\tif (req.isAuthenticated()) {\r\n\r\n\t\t\t// create a token\r\n            let token = jwt.sign(req.user, config.secret, {\r\n\t\t\t\texpiresIn: config.token_duration\r\n\t\t\t});\r\n\r\n\t\t\t// return the token information\r\n\t\t\treturn res.json({\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\ttoken: token,\r\n\t\t\t\texpiresIn: config.token_duration\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn res.json({ success: false, message: \"Authentication failed.\" });\r\n\t\t}\r\n\t});\r\n\r\n/*\r\n.post('/token', function (req, res) {\r\n\t\r\n\tvar originalDecoded = jwt.decode(req.body.token, {complete: true});\r\n\tvar refreshed = jwt.refresh(originalDecoded, config.token_duration, config.secret);\r\n\t\r\n\t// return the new token information\r\n\tres.json({\r\n\t\tsuccess: true,\r\n\t\ttoken: refreshed,\r\n\t\texpiresIn: config.token_duration\r\n\t});\r\n})\r\n*/\r\n\r\nmodule.exports = router;"
  ]
}