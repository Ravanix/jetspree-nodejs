{
  "version": 3,
  "sources": [
    "routes/login.js"
  ],
  "names": [
    "saltRounds",
    "router",
    "Router",
    "post",
    "req",
    "res",
    "checkBody",
    "signup",
    "errors",
    "validationErrors",
    "json",
    "success",
    "pool",
    "connect",
    "then",
    "client",
    "query",
    "body",
    "email",
    "result",
    "rowCount",
    "message",
    "catch",
    "release",
    "e",
    "hash",
    "password",
    "token",
    "sign",
    "id",
    "rows",
    "secret",
    "expiresIn",
    "token_duration",
    "queue",
    "create",
    "title",
    "subject",
    "to",
    "content",
    "priority",
    "attempts",
    "removeOnComplete",
    "save",
    "error",
    "console",
    "err",
    "length",
    "user",
    "compare",
    "match",
    "get",
    "isAuthenticated"
  ],
  "mappings": "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",
  "file": "login.js",
  "sourcesContent": [
    "import express from \"express\";\r\nimport config from \"./../config\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcrypt\";\r\nimport schemas from \"../schemas\";\r\n\r\nconst saltRounds = 10;\r\n\r\nconst router = express.Router();\r\n\r\nrouter\r\n\r\n    .post('/signup', function (req, res) {\r\n\r\n        req.checkBody(schemas.signup);\r\n        let errors = req.validationErrors();\r\n\r\n        if (errors) {\r\n            return res.json({success: false, errors: errors});\r\n        }\r\n\r\n        req.pool.connect().then(client => {\r\n\r\n            // check if email already exists\r\n            client.query('SELECT email FROM users WHERE email=$1', [req.body.email])\r\n                .then(result => {\r\n                    if (result.rowCount >= 1)\r\n                        return res.json({success: false, message: \"This email has already been taken.\"});\r\n                })\r\n                .catch(e => {\r\n                    client.release();\r\n                    throw e;\r\n                });\r\n\r\n            // encrypt password\r\n            bcrypt.hash(req.body.password, saltRounds)\r\n                .then(function (hash) {\r\n\r\n                    // create new user record\r\n                    client.query('INSERT INTO users(email, password) VALUES($1, $2) RETURNING id,email', [req.body.email, hash])\r\n                        .then(result => {\r\n                            client.release();\r\n                            if (result.rowCount === 1) {\r\n                                // create a token\r\n                                let token = jwt.sign({\r\n                                    id: result.rows[0].id,\r\n                                    email: result.rows[0].email\r\n                                }, config.secret, {\r\n                                    expiresIn: config.token_duration\r\n                                });\r\n\r\n                                // add email queue\r\n                                req.queue.create('email', {\r\n                                    title: 'Sign Up',\r\n                                    subject: 'Welcome to JetSpree',\r\n                                    to: result.rows[0].email,\r\n                                    content: 'Testing some Mailgun awesomness!',\r\n                                }).priority('high').attempts(5).removeOnComplete(true).save((error) => {\r\n                                    if (error)\r\n                                        console.error(error);\r\n                                });\r\n\r\n                                // return the token information\r\n                                return res.json({\r\n                                    success: true,\r\n                                    token: token,\r\n                                    expiresIn: config.token_duration\r\n                                });\r\n                            } else\r\n                                return res.json({success: false});\r\n                        })\r\n                        .catch(e => {\r\n                            client.release();\r\n                            throw e;\r\n                        });\r\n                })\r\n                .catch(function (err) {\r\n                    throw err;\r\n                });\r\n        });\r\n\r\n    })\r\n\r\n    .post('/account', function (req, res) {\r\n        req.pool.connect().then(client => {\r\n\r\n            // find the user\r\n            client.query('SELECT * FROM users WHERE email=$1 LIMIT 1', [req.body.email])\r\n                .then(result => {\r\n                    client.release();\r\n\r\n                    // user not found\r\n                    if (result.rows.length < 1) {\r\n                        return res.json({success: false, message: 'Authentication failed.'});\r\n                    } else if (result.rows[0].password === null) {\r\n                        return res.json({success: false, message: 'Authentication failed.'});\r\n                    } else {\r\n                        let user = result.rows[0];\r\n\r\n                        bcrypt.compare(req.body.password, user.password)\r\n                            .then(function (match) {\r\n\r\n                                // wrong password\r\n                                if (!match) {\r\n                                    return res.json({success: false, message: 'Authentication failed.'});\r\n                                } else {\r\n\r\n                                    // create a token\r\n                                    let token = jwt.sign({\r\n                                        id: user.id,\r\n                                        email: user.email\r\n                                    }, config.secret, {\r\n                                        expiresIn: config.token_duration\r\n                                    });\r\n\r\n                                    // return the token information\r\n                                    return res.json({\r\n                                        success: true,\r\n                                        token: token,\r\n                                        expiresIn: config.token_duration\r\n                                    });\r\n                                }\r\n\r\n                            });\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    client.release();\r\n                    throw e;\r\n                });\r\n        });\r\n\r\n    })\r\n\r\n    //authenticated by passport\r\n    .get('/authenticated', function (req, res) {\r\n        if (req.isAuthenticated()) {\r\n\r\n            // create a token\r\n            let token = jwt.sign(req.user, config.secret, {\r\n                expiresIn: config.token_duration\r\n            });\r\n\r\n            // return the token information\r\n            return res.json({\r\n                success: true,\r\n                token: token,\r\n                expiresIn: config.token_duration\r\n            });\r\n        } else {\r\n            return res.json({success: false, message: \"Authentication failed.\"});\r\n        }\r\n    });\r\n\r\n/*\r\n .post('/token', function (req, res) {\r\n\r\n var originalDecoded = jwt.decode(req.body.token, {complete: true});\r\n var refreshed = jwt.refresh(originalDecoded, config.token_duration, config.secret);\r\n\r\n // return the new token information\r\n res.json({\r\n success: true,\r\n token: refreshed,\r\n expiresIn: config.token_duration\r\n });\r\n })\r\n */\r\n\r\nexport default router;"
  ]
}