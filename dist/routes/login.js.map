{"version":3,"sources":["../../src/routes/login.js"],"names":["saltRounds","router","Router","post","req","res","body","email","undefined","password","json","success","message","length","pool","connect","then","client","query","result","rowCount","catch","release","e","hash","console","log","err","rows","user","compare","match","token","sign","secret","expiresIn","token_duration","get","isAuthenticated","module","exports"],"mappings":"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","file":"login.js","sourcesContent":["import express from 'express';\r\nimport config from './../config';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nconst saltRounds = 10;\r\n\r\nconst router = express.Router();\r\n\r\nrouter\r\n\r\n\t.post('/signup', function (req, res) {\r\n\r\n\t\tif (req.body.email == undefined || req.body.password == undefined\r\n\t\t\t|| req.body.email == '' || req.body.password == '') {\r\n\t\t\treturn res.json({ success: false, message: \"Email and Password are required.\" });\r\n\t\t} else {\r\n\r\n\t\t\t// check password mininum length\r\n\t\t\tif (req.body.password.length < 6)\r\n\t\t\t\treturn res.json({ success: false, message: \"Password too short.\" });\r\n\r\n\t\t\treq.pool.connect().then(client => {\r\n\r\n\t\t\t\t// check if email already exists\r\n\t\t\t\tclient.query('SELECT email FROM users WHERE email=$1', [req.body.email])\r\n\t\t\t\t\t.then(result => {\r\n\t\t\t\t\t\tif (result.rowCount >= 1)\r\n\t\t\t\t\t\t\treturn res.json({ success: false, message: \"This email has already been taken.\" });\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(e => {\r\n\t\t\t\t\t\tclient.release();\r\n\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t// encrypt password\r\n\t\t\t\tbcrypt.hash(req.body.password, saltRounds)\r\n\t\t\t\t\t.then(function (hash) {\r\n\r\n\t\t\t\t\t\t// create new user record\r\n\t\t\t\t\t\tclient.query('INSERT INTO users(email, password) VALUES($1, $2)', [req.body.email, hash])\r\n\t\t\t\t\t\t\t.then(result => {\r\n\t\t\t\t\t\t\t\tclient.release();\r\n\t\t\t\t\t\t\t\tif (result.rowCount == 1)\r\n\t\t\t\t\t\t\t\t\treturn res.json({ success: true });\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\treturn res.json({ success: false });\r\n\t\t\t\t\t\t\t\tconsole.log(\"already res.json\");\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.catch(e => {\r\n\t\t\t\t\t\t\t\tclient.release();\r\n\t\t\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(function (err) {\r\n\t\t\t\t\t\tthrow err;\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t})\r\n\r\n\t.post('/authenticate', function (req, res) {\r\n\t\treq.pool.connect().then(client => {\r\n\r\n\t\t\t// find the user\r\n\t\t\tclient.query('SELECT id,email FROM users WHERE email=$1 LIMIT 1', [req.body.email])\r\n\t\t\t\t.then(result => {\r\n\t\t\t\t\tclient.release();\r\n\r\n\t\t\t\t\t// user not found\r\n\t\t\t\t\tif (result.rows.length < 1) {\r\n\t\t\t\t\t\treturn res.json({ success: false, message: 'Authentication failed.' });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar user = result.rows[0];\r\n\r\n\t\t\t\t\t\tbcrypt.compare(req.body.password, user.password)\r\n\t\t\t\t\t\t\t.then(function (match) {\r\n\r\n\t\t\t\t\t\t\t\t// wrong password\r\n\t\t\t\t\t\t\t\tif (!match) {\r\n\t\t\t\t\t\t\t\t\treturn res.json({ success: false, message: 'Authentication failed.' });\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\t// create a token\r\n\t\t\t\t\t\t\t\t\tvar token = jwt.sign(user, config.secret, {\r\n\t\t\t\t\t\t\t\t\t\texpiresIn: config.token_duration\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\t// return the token information\r\n\t\t\t\t\t\t\t\t\treturn res.json({\r\n\t\t\t\t\t\t\t\t\t\tsuccess: true,\r\n\t\t\t\t\t\t\t\t\t\ttoken: token,\r\n\t\t\t\t\t\t\t\t\t\texpiresIn: config.token_duration\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(e => {\r\n\t\t\t\t\tclient.release();\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t});\r\n\t\t});\r\n\r\n\t})\r\n\r\n\t//authenticated by passport\r\n\t.get('/authenticated', function (req, res) {\r\n\t\tif (req.isAuthenticated()) {\r\n\t\t\t// create a token\r\n\t\t\tvar token = jwt.sign(req.user, config.secret, {\r\n\t\t\t\texpiresIn: config.token_duration\r\n\t\t\t});\r\n\r\n\t\t\t// return the token information\r\n\t\t\treturn res.json({\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\ttoken: token,\r\n\t\t\t\texpiresIn: config.token_duration\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn res.json({ success: false, message: \"Authentication failed.\" });\r\n\t\t}\r\n\t});\r\n\r\n/*\r\n.post('/token', function (req, res) {\r\n\t\r\n\tvar originalDecoded = jwt.decode(req.body.token, {complete: true});\r\n\tvar refreshed = jwt.refresh(originalDecoded, config.token_duration, config.secret);\r\n\t\r\n\t// return the new token information\r\n\tres.json({\r\n\t\tsuccess: true,\r\n\t\ttoken: refreshed,\r\n\t\texpiresIn: config.token_duration\r\n\t});\r\n})\r\n*/\r\n\r\n;\r\n\r\nmodule.exports = router;"]}