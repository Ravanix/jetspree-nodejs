{
  "version": 3,
  "sources": [
    "../../../src/routes/private/requests.js"
  ],
  "names": [
    "router",
    "Router",
    "post",
    "req",
    "res",
    "checkBody",
    "request",
    "errors",
    "validationErrors",
    "json",
    "success",
    "imageData",
    "body",
    "image",
    "match",
    "imageExt",
    "substring",
    "toLowerCase",
    "replace",
    "indexOf",
    "field",
    "msg",
    "handleError",
    "error",
    "console",
    "end",
    "Error",
    "insertRequest",
    "resolve",
    "reject",
    "pool",
    "connect",
    "then",
    "client",
    "query",
    "name",
    "price",
    "description",
    "decoded",
    "id",
    "release",
    "result",
    "rows",
    "catch",
    "uploadImage",
    "ret",
    "promisifyAll",
    "prototype",
    "imageName",
    "buffer",
    "Buffer",
    "from",
    "s3",
    "aws",
    "S3",
    "bucket",
    "data",
    "Bucket",
    "Key",
    "Body",
    "ContentType",
    "size",
    "width",
    "image_max_resolution",
    "height",
    "resize",
    "toBuffer",
    "buff",
    "identifyAsync",
    "putObject",
    "promise",
    "imagePath",
    "updateImagePath",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "requests.js",
  "sourcesContent": [
    "import express from \"express\";\r\nimport schemas from \"../../schemas\";\r\nimport config from \"../../config\";\r\nimport GM from \"gm\";\r\nimport Promise from \"bluebird\";\r\nimport Slug from \"slug\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter\r\n\r\n// Post a request\r\n    .post('/', function (req, res) {\r\n\r\n        // validate user's input\r\n        req.checkBody(schemas.request);\r\n        let errors = req.validationErrors();\r\n        if (errors) return res.json({success: false, errors: errors});\r\n\r\n        // image details and check type\r\n        let imageData = req.body.image.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/);\r\n        let imageExt = imageData[1].substring(6).toLowerCase().replace(\"jpeg\", \"jpg\");\r\n        if (['jpg', 'png', 'gif', 'webp'].indexOf(imageExt) < 0) {\r\n            return res.json({success: false, errors: [{field: \"image\", msg: \"Unsupported image type.\"}]});\r\n        }\r\n\r\n        let handleError = function (error) {\r\n            console.error(error);\r\n            res.json({success: false, errors: [error]});\r\n            res.end();\r\n            throw new Error();\r\n        };\r\n\r\n        let insertRequest = function () {\r\n            return new Promise((resolve, reject) => {\r\n                req.pool.connect()\r\n                    .then(client => {\r\n                        client.query('INSERT INTO items (name, price, description, user_id) '\r\n                            + 'VALUES ($1, $2, $3, $4) RETURNING id, name, price, description',\r\n                            [req.body.name, req.body.price, req.body.description, req.decoded.id])\r\n                            .then(result => {\r\n                                client.release();\r\n                                resolve(result.rows[0]);\r\n                            })\r\n                            .catch(error => {\r\n                                client.release();\r\n                                reject(error);\r\n                            });\r\n                    })\r\n                    .catch(error => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        };\r\n\r\n        let uploadImage = function (ret) {\r\n            return new Promise((resolve, reject) => {\r\n                Promise.promisifyAll(GM.prototype);\r\n                let imageName = Slug(req.body.name.toLowerCase()) + \".\" + imageExt;\r\n                let buffer = Buffer.from(imageData[2], 'base64');\r\n\r\n                // s3 initialization and objects that required\r\n                let s3 = new req.aws.S3();\r\n                let bucket = \"/requests/\" + ret.id;\r\n                let data = {\r\n                    Bucket: bucket,\r\n                    Key: imageName,\r\n                    Body: buffer,\r\n                    ContentType: imageData[1]\r\n                };\r\n                let image = GM(buffer);\r\n                return image\r\n                    .size((error, size) => {\r\n                        if (error) reject(error);\r\n                        if (size.width > config.image_max_resolution.width ||\r\n                            size.height > config.image_max_resolution.height) {\r\n                            image.resize(config.image_max_resolution.width,\r\n                                config.image_max_resolution.height).toBuffer(imageExt, (error, buff) => {\r\n                                if (error) reject(error);\r\n                                else data.Body = buff;\r\n                            });\r\n                        } else {\r\n                            image.resize(size.width, size.height).toBuffer(imageExt, (error, buff) => {\r\n                                if (error) reject(error);\r\n                                else data.Body = buff;\r\n                            });\r\n                        }\r\n                    }).identifyAsync()\r\n                    .then(() => {\r\n                        return s3.putObject(data).promise();\r\n                    }, handleError).catch(Error)\r\n                    .then(() => {\r\n                        ret.imagePath = bucket + \"/\" + imageName;\r\n                        resolve(ret);\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        };\r\n\r\n        let updateImagePath = function (ret) {\r\n            return new Promise((resolve, reject) => {\r\n                req.pool.connect()\r\n                    .then(client => {\r\n                        client.query('UPDATE items SET image_path=$1 WHERE id=$2 AND user_id=$3',\r\n                            [ret.imagePath, ret.id, req.decoded.id])\r\n                            .then(() => {\r\n                                client.release();\r\n                                resolve(ret);\r\n                            })\r\n                            .catch(error => {\r\n                                client.release();\r\n                                reject(error);\r\n                            });\r\n                    })\r\n                    .catch(error => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        };\r\n\r\n        insertRequest()\r\n            .then(uploadImage, handleError).catch(Error)\r\n            .then(updateImagePath, handleError).catch(Error)\r\n            .then(ret => {\r\n                res.json({success: true, result: ret});\r\n                res.end();\r\n            }, handleError).catch(Error);\r\n    });\r\n\r\nmodule.exports = router;"
  ]
}