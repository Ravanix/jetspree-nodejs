{
  "version": 3,
  "sources": [
    "routes/private/authorize.js"
  ],
  "names": [
    "router",
    "Router",
    "use",
    "req",
    "res",
    "next",
    "token",
    "body",
    "query",
    "headers",
    "verify",
    "secret",
    "err",
    "decoded",
    "json",
    "success",
    "message",
    "status",
    "send"
  ],
  "mappings": ";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;AAEAD,OACEE,GADF,CACM,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACvB,KAAIC,QAAQH,IAAII,IAAJ,CAASD,KAAT,IAAkBH,IAAIK,KAAJ,CAAUF,KAA5B,IAAqCH,IAAIM,OAAJ,CAAY,gBAAZ,CAAjD;AACN,KAAIH,KAAJ,EAAW;;AAEV;AACA,yBAAII,MAAJ,CAAWJ,KAAX,EAAkB,iBAAOK,MAAzB,EAAiC,UAASC,GAAT,EAAcC,OAAd,EAAuB;AACvD,OAAID,GAAJ,EAAS;AACR,WAAOR,IAAIU,IAAJ,CAAS,EAAEC,SAAS,KAAX,EAAkBC,SAAS,+BAA3B,EAAT,CAAP;AACA,IAFD,MAEO;;AAEN;AACAb,QAAIU,OAAJ,GAAcA,OAAd;AACAR;AACA;AACD,GATD;AAWA,EAdD,MAcO;;AAEN;AACA,SAAOD,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BH,YAAS,KADkB;AAE3BC,YAAS;AAFkB,GAArB,CAAP;AAKA;AACD,CA1BF;;kBA4BehB,M",
  "file": "authorize.js",
  "sourcesContent": [
    "import express from \"express\";\r\nimport config from \"./../../config\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter\r\n\t.use(function(req, res, next) {\r\n        let token = req.body.token || req.query.token || req.headers['x-access-token'];\r\n\t\tif (token) {\r\n\t\t\r\n\t\t\t// verifies secret and checks exp\r\n\t\t\tjwt.verify(token, config.secret, function(err, decoded) {      \r\n\t\t\t\tif (err) {\r\n\t\t\t\t\treturn res.json({ success: false, message: 'Failed to authenticate token.' });    \r\n\t\t\t\t} else {\r\n\t\t\t\t\r\n\t\t\t\t\t// save to request for use in other routes\r\n\t\t\t\t\treq.decoded = decoded;    \r\n\t\t\t\t\tnext();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// there is no token\r\n\t\t\treturn res.status(403).send({ \r\n\t\t\t\tsuccess: false, \r\n\t\t\t\tmessage: 'No valid token provided.' \r\n\t\t\t});\r\n\t\t\r\n\t\t}\r\n\t});\r\n\r\nexport default router;"
  ]
}