{"version":3,"sources":["../../src/routes/requests.js"],"names":["router","Router","get","req","res","db","collection","page","pagesize","query","parseInt","category","name","$regex","RegExp","match","join","$options","find","skip","limit","e","docs","json","post","checkBody","request","errors","validationErrors","send","insert","body","uid","price","Date","err","result","i","delete","drop","message","module","exports"],"mappings":"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","file":"requests.js","sourcesContent":["ï»¿import express from 'express';\r\nimport schemas from '../schemas';\r\nconst router = express.Router();\r\n\r\nrouter\r\n    /* GET list of Requests */\r\n    .get('/', function (req, res) {\r\n        let db = req.db;\r\n        let collection = db.get('requests');\r\n\r\n        let page = 1;\r\n        let pagesize = 30;\r\n        if (req.query.page) page = parseInt(req.query.page);\r\n        if (req.query.pagesize) pagesize = parseInt(req.query.pagesize);\r\n\r\n        let query = {};\r\n\r\n        if (req.query.category) {\r\n            query.category = req.query.category;\r\n        }\r\n\r\n        if (req.query.name) {\r\n            query.name = {\r\n                $regex: new RegExp(req.query.name.match(/[^ ]+/g).join(\"|\"), 'g'),\r\n                $options: 'i' //i: ignore case, m: multiline, etc\r\n            };\r\n        }\r\n\r\n        collection.find(query, { skip: pagesize * (page - 1), limit: pagesize }, function (e, docs) {\r\n            res.json(docs);\r\n        });\r\n    })\r\n\r\n    /* POST a new Request */\r\n    .post('/', function (req, res) {\r\n        req.checkBody(schemas.request);\r\n        let errors = req.validationErrors();\r\n\r\n        if (errors) {\r\n            return res.send(errors);\r\n        }\r\n\r\n        let db = req.db;\r\n        let collection = db.get('requests');\r\n        collection.insert(\r\n            {\r\n                \"uid\": req.body.uid,\r\n                \"name\": req.body.name,\r\n                \"category\": req.body.category,\r\n                \"price\": req.body.price,\r\n                \"datetime\": new Date(),\r\n                \"lastModified\": new Date()\r\n            },\r\n            function (err, result) {\r\n                res.json(result);\r\n            });\r\n    })\r\n\r\n    /* POST a batch Request for testing */\r\n    .post('/batch', function (req, res) {\r\n        req.checkBody(schemas.request);\r\n        let errors = req.validationErrors();\r\n\r\n        if (errors) {\r\n            return res.send(errors);\r\n        }\r\n\r\n        for (let i = 0; i < 100; i++) {\r\n            let db = req.db;\r\n            let collection = db.get('requests');\r\n            collection.insert(\r\n                {\r\n                    \"uid\": req.body.uid,\r\n                    \"name\": req.body.name,\r\n                    \"category\": req.body.category,\r\n                    \"price\": req.body.price,\r\n                    \"datetime\": new Date(),\r\n                    \"lastModified\": new Date()\r\n                },\r\n                function (err, result) {\r\n                    res.json(result);\r\n                });\r\n        }\r\n    })\r\n\r\n    /*\r\n\t * DELETE Only to clear junk records, we shouldn't delete any record in\r\n\t * Production\r\n\t */\r\n    .delete('/truncate', function (req, res) {\r\n        let db = req.db;\r\n        let collection = db.get('requests');\r\n        collection.drop();\r\n        res.json({ message: \"truncated\" });\r\n    });\r\n\r\nmodule.exports = router;"]}