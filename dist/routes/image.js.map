{
  "version": 3,
  "sources": [
    "../../src/routes/image.js"
  ],
  "names": [
    "router",
    "Router",
    "get",
    "req",
    "res",
    "originalBucket",
    "s3_bucket_root",
    "bucket",
    "params",
    "folder1",
    "undefined",
    "folder2",
    "folder3",
    "folder4",
    "folder5",
    "test",
    "query",
    "width",
    "height",
    "crop",
    "redirect",
    "s3_url",
    "key",
    "s3",
    "aws",
    "S3",
    "getResized",
    "resolve",
    "getObject",
    "Bucket",
    "Key",
    "error",
    "response",
    "getOriginal",
    "reject",
    "resizeImage",
    "data",
    "newSize",
    "Body",
    "resize",
    "gravity",
    "toBuffer",
    "buffer",
    "putObject",
    "ContentLength",
    "statusCode",
    "ContentType",
    "handleError",
    "status",
    "send",
    "json",
    "success",
    "errors",
    "end",
    "Error",
    "handleRespond",
    "respond",
    "writeHead",
    "length",
    "then",
    "ret",
    "catch",
    "module",
    "exports"
  ],
  "mappings": "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",
  "file": "image.js",
  "sourcesContent": [
    "import express from \"express\";\r\nimport GM from \"gm\";\r\nimport config from \"../config\";\r\nimport Promise from \"bluebird\";\r\nconst router = express.Router();\r\n\r\nrouter\r\n\r\n// Get image\r\n    .get(['/:key', '/:folder1/:key',\r\n            '/:folder1/:folder2/:key',\r\n            '/:folder1/:folder2/:folder3/:key',\r\n            '/:folder1/:folder2/:folder3/:folder4/:key',\r\n            '/:folder1/:folder2/:folder3/:folder4/:folder5/:key'],\r\n        (req, res) => {\r\n            let originalBucket = config.s3_bucket_root;\r\n            let bucket = '';\r\n\r\n            // structure folders, may add more folders if necessary\r\n            if (req.params.folder1 !== undefined)\r\n                originalBucket += \"/\" + req.params.folder1;\r\n            if (req.params.folder2 !== undefined)\r\n                originalBucket += \"/\" + req.params.folder2;\r\n            if (req.params.folder3 !== undefined)\r\n                originalBucket += \"/\" + req.params.folder3;\r\n            if (req.params.folder4 !== undefined)\r\n                originalBucket += \"/\" + req.params.folder4;\r\n            if (req.params.folder5 !== undefined)\r\n                originalBucket += \"/\" + req.params.folder5;\r\n\r\n            if (/^\\d+$/.test(req.query.width) && /^\\d+$/.test(req.query.height)) {\r\n                bucket += originalBucket + \"/\" + req.query.width + \"_\" + req.query.height;\r\n                if (req.query.crop === 'true') {\r\n                    bucket += \"_crop\"\r\n                }\r\n            } else {\r\n                return res.redirect(config.s3_url + \"/\" + originalBucket + \"/\" + req.params.key);\r\n            }\r\n\r\n            let s3 = new req.aws.S3();\r\n\r\n            let getResized = function () {\r\n                return new Promise(function (resolve) {\r\n                    s3.getObject({Bucket: bucket, Key: req.params.key}, (error, response) => {\r\n                        if (error)\r\n                            resolve(null);\r\n                        else\r\n                            resolve(response)\r\n                    });\r\n                });\r\n            };\r\n\r\n            let getOriginal = function () {\r\n                return new Promise(function (resolve, reject) {\r\n                    s3.getObject({Bucket: originalBucket, Key: req.params.key}, (error, response) => {\r\n                        if (error) {\r\n                            reject(error);\r\n                        } else {\r\n                            resolve(response);\r\n                        }\r\n                    });\r\n                });\r\n            };\r\n\r\n            let resizeImage = function (data) {\r\n                return new Promise(function (resolve, reject) {\r\n                    if (!/^\\d+$/.test(req.query.width) && !/^\\d+$/.test(req.query.height)) {\r\n                        resolve(data);\r\n                    } else {\r\n                        if (req.query.crop === 'true') {\r\n                            let newSize = (req.query.width > req.query.height ? req.query.width : req.query.height);\r\n                            GM(data.Body)\r\n                                .resize(newSize, newSize, '^')\r\n                                .gravity(\"Center\")\r\n                                .crop(req.query.width, req.query.height)\r\n                                .toBuffer('jpg', (error, buffer) => {\r\n                                    if (error)\r\n                                        reject(error);\r\n                                    else {\r\n                                        data.Body = buffer;\r\n                                        resolve(data);\r\n                                    }\r\n                                });\r\n                        } else {\r\n                            GM(data.Body)\r\n                                .resize(req.query.width, req.query.height)\r\n                                .toBuffer('jpg', (error, buffer) => {\r\n                                    if (error)\r\n                                        reject(error);\r\n                                    else {\r\n                                        data.Body = buffer;\r\n                                        resolve(data);\r\n                                    }\r\n                                });\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n\r\n            let putObject = function (data) {\r\n                return new Promise(function (resolve, reject) {\r\n                    if (!/^\\d+$/.test(req.query.width) && !/^\\d+$/.test(req.query.height)) {\r\n                        resolve(data);\r\n                    } else if (!data.ContentLength) {\r\n                        reject({statusCode: 404});\r\n                    } else {\r\n                        let params = {\r\n                            Bucket: bucket,\r\n                            Key: req.params.key,\r\n                            Body: data.Body,\r\n                            ContentType: data.ContentType\r\n                        };\r\n                        s3.putObject(params, (error) => {\r\n                            if (error) {\r\n                                reject(error);\r\n                            } else {\r\n                                resolve(data);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            let handleError = function (error) {\r\n                if (error.statusCode === 404)\r\n                    res.status(404).send(\"Not Found\");\r\n                else\r\n                    res.json({success: false, errors: [error]});\r\n                res.end();\r\n                throw new Error();\r\n            };\r\n\r\n            let handleRespond = function (respond) {\r\n                res.writeHead(200, {\r\n                    'Content-Type': respond.ContentType,\r\n                    'Content-Length': respond.Body.length\r\n                });\r\n                res.end(respond.Body, 'binary');\r\n            };\r\n\r\n            getResized()\r\n                .then(ret => {\r\n                    if (ret === null) {\r\n                        // resized image not found, get the original image to resize\r\n                        return getOriginal()\r\n                            .then(resizeImage, handleError).catch(Error)\r\n                            .then(putObject, handleError).catch(Error)\r\n                            .then(handleRespond, handleError).catch(Error)\r\n                    } else {\r\n                        if (ret.ContentLength > 0) {\r\n                            // resized image found, so just respond it.\r\n                            handleRespond(ret);\r\n                        } else {\r\n                            // probably wrong url or the file no longer exists.\r\n                            res.end();\r\n                        }\r\n                    }\r\n                }, handleError).catch(Error);\r\n        });\r\n\r\nmodule.exports = router;"
  ]
}